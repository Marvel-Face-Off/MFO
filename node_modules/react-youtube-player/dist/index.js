'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _youtubePlayer = require('youtube-player');

var _youtubePlayer2 = _interopRequireDefault(_youtubePlayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*:: type PlaybackStateNameType = 'playing' | 'paused' | 'unstarted';*/
/*:: type ConfigurationType = {|
  +autoplay: 0 | 1,
  +cc_load_policy: 0 | 1,
  +color: 'red' | 'white',
  +controls: 0 | 1 | 2,
  +disablekb: 0 | 1,
  +enablejsapi: 0 | 1,
  +end: number,
  +fs: 0 | 1,
  +hl: string,
  +iv_load_policy: 1 | 3,
  +list: 'search' | 'user_uploads' | 'playlist',
  +listType: 'playlist' | 'search' | 'user_uploads',
  +loop: 0 | 1,
  +modestbranding: 0 | 1,
  +origin: string,
  +playlist: string,
  +playsinline: 0 | 1,
  +rel: 0 | 1,
  +showinfo: 0 | 1,
  +start: number,
  +theme: 'dark' | 'light'
|};*/
/*:: type PropsType = {|
  +videoId: string,

  /**
   * @property configuration Configuration parameters to be passed to the YouTube Player (known as `playerVars` in the YouTube Player API for iframe Embeds, https://developers.google.com/youtube/player_parameters?playerVersion=HTML5#Parameters).
   *-/
  +configuration: ConfigurationType,

  /**
   * @value 'unstarted' Stops and cancels loading of the current video. [stopVideo]{@link https://developers.google.com/youtube/iframe_api_reference#stopVideo}
   * @value 'playing' Plays the currently cued/loaded video. [playVideo]{@link https://developers.google.com/youtube/iframe_api_reference#playVideo}
   * @value 'paused' Pauses the currently playing video. [pauseVideo]{@link https://developers.google.com/youtube/iframe_api_reference#pauseVideo}
   *-/
  +playbackState: string,

  // https://developers.google.com/youtube/iframe_api_reference#onReady
  // onReady: React.PropTypes.func,

  // https://developers.google.com/youtube/iframe_api_reference#onStateChange
  // onStateChange: React.PropTypes.func,

  // https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange
  // onPlaybackQualityChange: React.PropTypes.func,

  // https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange
  // onPlaybackRateChange: React.PropTypes.func,

  // https://developers.google.com/youtube/iframe_api_reference#onApiChange
  // onApiChange: React.PropTypes.func,
  onBuffer: Function,

  // https://developers.google.com/youtube/iframe_api_reference#onStateChange
  onEnd: Function,

  // https://developers.google.com/youtube/iframe_api_reference#onError
  onError: Function,
  onPause: Function,
  onPlay: Function
|};*/

var ReactYoutubePlayer = function (_React$Component) {
  _inherits(ReactYoutubePlayer, _React$Component);

  // eslint-disable-next-line no-useless-constructor
  function ReactYoutubePlayer(props /*: PropsType*/) {
    _classCallCheck(this, ReactYoutubePlayer);

    var _this = _possibleConstructorReturn(this, (ReactYoutubePlayer.__proto__ || Object.getPrototypeOf(ReactYoutubePlayer)).call(this, props));

    _this.setRealPlaybackState = function (stateName /*: string*/) /*: void*/ {
      _this.realPlaybackState = stateName;
    };

    _this.getRealPlaybackState = function () /*: string*/ {
      return _this.realPlaybackState;
    };

    _this.bindEvent = function () /*: void*/ {
      _this.player.on('stateChange', function (event) {
        _this.setRealPlaybackState(ReactYoutubePlayer.stateNames[event.data]);

        var realPlaybackState = _this.getRealPlaybackState();

        if (realPlaybackState === 'ended') {
          _this.props.onEnd(event);
        } else if (realPlaybackState === 'playing') {
          _this.props.onPlay(event);
        } else if (realPlaybackState === 'paused') {
          _this.props.onPause(event);
        } else if (realPlaybackState === 'buffering') {
          _this.props.onBuffer(event);
        }
      });

      _this.player.on('error', function (event) {
        _this.props.onError(event);
      });
    };

    _this.diffState = function (prevProps /*: $Shape<PropsType>*/, nextProps /*: $Shape<PropsType>*/) /*: void*/ {
      if (prevProps.videoId !== nextProps.videoId && nextProps.videoId) {
        _this.cueVideoId(nextProps.videoId);
      }

      if (_this.realPlaybackState !== nextProps.playbackState && nextProps.playbackState) {
        _this.setPlaybackState(nextProps.playbackState);
      }
    };

    _this.setPlaybackState = function (stateName /*: PlaybackStateNameType*/) /*: void*/ {
      if (stateName === 'playing') {
        _this.player.playVideo();
      } else if (stateName === 'paused') {
        _this.player.pauseVideo();
      } else if (stateName === 'unstarted') {
        _this.player.stopVideo();
      } else {
        throw new Error('Invalid playback state ("' + stateName + '").');
      }
    };

    _this.cueVideoId = function (videoId /*: string*/) /*: void*/ {
      _this.player.cueVideoById(videoId);
    };

    return _this;
  }

  _createClass(ReactYoutubePlayer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.player = (0, _youtubePlayer2.default)(this.refPlayer, {
        height: '100%',
        playerVars: this.props.configuration,
        width: '100%'
      });

      this.bindEvent();

      this.diffState({}, this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.diffState(this.props, nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() /*: boolean*/ {
      return false;
    }

    /**
     * State set using 'state' property can change, e.g.
     * 'playing' will change to 'ended' at the end of the video.
     * Read playback state reflects the current player state
     * and is used to compare against the video player properties.
     */


    /**
     * Used to map YouTube IFrame Player API events to the callbacks
     * defined using the component instance properties.
     */


    /**
     * The complexity of the ReactYoutubePlayer is that it attempts to combine
     * stateless properties with stateful player. This function is comparing
     * the last known property value of a state with the last known state of the player.
     * When these are different, it initiates an action that changes the player state, e.g.
     * when the current "state" property is "play" and the last known player state is "pause",
     * then setPlaybackState method will be called.
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var style = {
        display: 'block',
        height: '100%',
        width: '100%'
      };

      return _react2.default.createElement(
        'div',
        {
          ref: function ref(element) {
            _this2.refViewport = element;
          }, style: style },
        _react2.default.createElement('div', {
          ref: function ref(element) {
            _this2.refPlayer = element;
          }, style: style
        })
      );
    }
  }]);

  return ReactYoutubePlayer;
}(_react2.default.Component);

ReactYoutubePlayer.stateNames = {
  '-1': 'unstarted',
  0: 'ended',
  1: 'playing',
  2: 'paused',
  3: 'buffering',
  5: 'cued'
};
ReactYoutubePlayer.defaultProps = {
  configuration: {},
  onBuffer: function onBuffer() {},
  onEnd: function onEnd() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  playbackState: 'unstarted'
};
exports.default = ReactYoutubePlayer;
//# sourceMappingURL=index.js.map
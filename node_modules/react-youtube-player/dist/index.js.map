{"version":3,"sources":["../src/index.js"],"names":["ReactYoutubePlayer","props","setRealPlaybackState","stateName","realPlaybackState","getRealPlaybackState","bindEvent","player","on","event","stateNames","data","onEnd","onPlay","onPause","onBuffer","onError","diffState","prevProps","nextProps","videoId","cueVideoId","playbackState","setPlaybackState","playVideo","pauseVideo","stopVideo","Error","cueVideoById","refPlayer","height","playerVars","configuration","width","style","display","element","refViewport","Component","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport YoutubePlayer from 'youtube-player';\n\ntype PlaybackStateNameType = 'playing' | 'paused' | 'unstarted';\n\ntype ConfigurationType = {|\n  +autoplay: 0 | 1,\n  +cc_load_policy: 0 | 1,\n  +color: 'red' | 'white',\n  +controls: 0 | 1 | 2,\n  +disablekb: 0 | 1,\n  +enablejsapi: 0 | 1,\n  +end: number,\n  +fs: 0 | 1,\n  +hl: string,\n  +iv_load_policy: 1 | 3,\n  +list: 'search' | 'user_uploads' | 'playlist',\n  +listType: 'playlist' | 'search' | 'user_uploads',\n  +loop: 0 | 1,\n  +modestbranding: 0 | 1,\n  +origin: string,\n  +playlist: string,\n  +playsinline: 0 | 1,\n  +rel: 0 | 1,\n  +showinfo: 0 | 1,\n  +start: number,\n  +theme: 'dark' | 'light'\n|};\n\ntype PropsType = {|\n  +videoId: string,\n\n  /**\n   * @property configuration Configuration parameters to be passed to the YouTube Player (known as `playerVars` in the YouTube Player API for iframe Embeds, https://developers.google.com/youtube/player_parameters?playerVersion=HTML5#Parameters).\n   */\n  +configuration: ConfigurationType,\n\n  /**\n   * @value 'unstarted' Stops and cancels loading of the current video. [stopVideo]{@link https://developers.google.com/youtube/iframe_api_reference#stopVideo}\n   * @value 'playing' Plays the currently cued/loaded video. [playVideo]{@link https://developers.google.com/youtube/iframe_api_reference#playVideo}\n   * @value 'paused' Pauses the currently playing video. [pauseVideo]{@link https://developers.google.com/youtube/iframe_api_reference#pauseVideo}\n   */\n  +playbackState: string,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onReady\n  // onReady: React.PropTypes.func,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onStateChange\n  // onStateChange: React.PropTypes.func,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\n  // onPlaybackQualityChange: React.PropTypes.func,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\n  // onPlaybackRateChange: React.PropTypes.func,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onApiChange\n  // onApiChange: React.PropTypes.func,\n  onBuffer: Function,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onStateChange\n  onEnd: Function,\n\n  // https://developers.google.com/youtube/iframe_api_reference#onError\n  onError: Function,\n  onPause: Function,\n  onPlay: Function\n|};\n\nclass ReactYoutubePlayer extends React.Component {\n  props: PropsType;\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor (props: PropsType) {\n    super(props);\n  }\n\n  static stateNames = {\n    '-1': 'unstarted',\n    0: 'ended',\n    1: 'playing',\n    2: 'paused',\n    3: 'buffering',\n    5: 'cued'\n  };\n\n  static defaultProps = {\n    configuration: {},\n    onBuffer: () => {},\n    onEnd: () => {},\n    onError: () => {},\n    onPause: () => {},\n    onPlay: () => {},\n    playbackState: 'unstarted'\n  };\n\n  componentDidMount () {\n    this.player = YoutubePlayer(this.refPlayer, {\n      height: '100%',\n      playerVars: this.props.configuration,\n      width: '100%'\n    });\n\n    this.bindEvent();\n\n    this.diffState({}, this.props);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this.diffState(this.props, nextProps);\n  }\n\n  shouldComponentUpdate (): boolean {\n    return false;\n  }\n\n  /**\n   * State set using 'state' property can change, e.g.\n   * 'playing' will change to 'ended' at the end of the video.\n   * Read playback state reflects the current player state\n   * and is used to compare against the video player properties.\n   */\n  setRealPlaybackState = (stateName: string): void => {\n    this.realPlaybackState = stateName;\n  };\n\n  getRealPlaybackState = (): string => {\n    return this.realPlaybackState;\n  };\n\n  /**\n   * Used to map YouTube IFrame Player API events to the callbacks\n   * defined using the component instance properties.\n   */\n  bindEvent = (): void => {\n    this.player.on('stateChange', (event) => {\n      this.setRealPlaybackState(ReactYoutubePlayer.stateNames[event.data]);\n\n      const realPlaybackState = this.getRealPlaybackState();\n\n      if (realPlaybackState === 'ended') {\n        this.props.onEnd(event);\n      } else if (realPlaybackState === 'playing') {\n        this.props.onPlay(event);\n      } else if (realPlaybackState === 'paused') {\n        this.props.onPause(event);\n      } else if (realPlaybackState === 'buffering') {\n        this.props.onBuffer(event);\n      }\n    });\n\n    this.player.on('error', (event) => {\n      this.props.onError(event);\n    });\n  };\n\n  /**\n   * The complexity of the ReactYoutubePlayer is that it attempts to combine\n   * stateless properties with stateful player. This function is comparing\n   * the last known property value of a state with the last known state of the player.\n   * When these are different, it initiates an action that changes the player state, e.g.\n   * when the current \"state\" property is \"play\" and the last known player state is \"pause\",\n   * then setPlaybackState method will be called.\n   */\n  diffState = (prevProps: $Shape<PropsType>, nextProps: $Shape<PropsType>): void => {\n    if (prevProps.videoId !== nextProps.videoId && nextProps.videoId) {\n      this.cueVideoId(nextProps.videoId);\n    }\n\n    if (this.realPlaybackState !== nextProps.playbackState && nextProps.playbackState) {\n      this.setPlaybackState(nextProps.playbackState);\n    }\n  };\n\n  setPlaybackState = (stateName: PlaybackStateNameType): void => {\n    if (stateName === 'playing') {\n      this.player.playVideo();\n    } else if (stateName === 'paused') {\n      this.player.pauseVideo();\n    } else if (stateName === 'unstarted') {\n      this.player.stopVideo();\n    } else {\n      throw new Error('Invalid playback state (\"' + stateName + '\").');\n    }\n  };\n\n  cueVideoId = (videoId: string): void => {\n    this.player.cueVideoById(videoId);\n  };\n\n  render () {\n    const style = {\n      display: 'block',\n      height: '100%',\n      width: '100%'\n    };\n\n    return <div\n      ref={(element) => {\n        this.refViewport = element;\n      }} style={style}>\n      <div\n        ref={(element) => {\n          this.refPlayer = element;\n        }} style={style}\n      />\n    </div>;\n  }\n}\n\nexport default ReactYoutubePlayer;\n"]}